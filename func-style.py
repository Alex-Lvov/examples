"""
1) Получить количество элементов
2) Получить последовательность величин
3) Вывести сумму квадратов величин
4) Вывести сумму квадратов четных величин
"""


def is_even(x: int) -> bool:
    """
    Проверка числа на четность

    :param x: int Проверяемое число
    :return: bool true если четное
    :rtype: bool
    """
    return not x % 2


"""
Решение №1
"""

# Количество элементов
n = int(input("количество элементов"))
# Преобразование вводимых через пробел целых числел в список
l = list(map(int, input("последовательность величин через пробел").split()))

s = 0
s_even = 0
if n < len(l):
    n = len(l)
for i in l:
    s += i**2 # s = s + i**2
    if is_even(i):
        s_even += i**2
print(f"Сумма квадратов всех элементов последовательности: {s}")
print(f"Сумма квадратов четных элементов последовательности: {s_even}")

"""
Решение №2
"""

"""
l = list(range(10))
print(l)

# "переворот" списка
print(l[11:0:-1])

# Привести каждый элемент к типу int
l = list(map(int, l))

# Оставить только четные элементы
l = list(filter(is_even, l))
print(l)

# Формирование списка квадратов на основе исходного списка и суммирование
l = sum([x**2 for x in l])
print(l)
"""

print(f"Сумма квадратов четных элементов последовательности:", sum([x**2 for x in list(filter(is_even, list(map(int, input().split()[:int(input("количество элементов?"))]))))]))

"""
Решение №3
"""

"""
# Формирование списка квадратов на основе исходного списка c фильтрацией по четности и суммирование
l = sum([x**2 for x in l if is_even(x)])
print(l)
"""

print(f"Сумма квадратов четных элементов последовательности:", sum([int(x)**2 for x in input().split()[:int(input("количество элементов?"))] if is_even(x)]))
